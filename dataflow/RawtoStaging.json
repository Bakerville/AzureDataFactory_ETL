{
	"name": "RawtoStaging",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_info",
						"type": "DatasetReference"
					},
					"name": "Rawdata"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_info_staging",
						"type": "DatasetReference"
					},
					"name": "Datalake",
					"rejectedDataLinkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "AddDimensionalAttribute"
				},
				{
					"name": "SelectNeededColumn"
				}
			],
			"scriptLines": [
				"parameters{",
				"     facultyName as string,",
				"     schoolYear as string,",
				"     sinkFileName as string,",
				"     className as string",
				"}",
				"source(output(",
				"          Prop_0 as string,",
				"          STT as string,",
				"          {Mã sinh viên} as string,",
				"          {Họ lót} as string,",
				"          {Tên} as string,",
				"          {Ngày sinh} as string,",
				"          {Xem điểm} as string,",
				"          {Lịch học} as string,",
				"          {Thông tin} as string,",
				"          {Lịch thi} as string,",
				"          {Học phí} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Rawdata",
				"Rawdata derive({Niên khoá} = $schoolYear,",
				"          Khoa = $facultyName,",
				"          {Ngày tạo} = currentDate(),",
				"          {Tên lớp} = split($className, '.')[1]) ~> AddDimensionalAttribute",
				"AddDimensionalAttribute select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectNeededColumn",
				"SelectNeededColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat($facultyName,'_', $schoolYear, '_', $sinkFileName))],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Datalake"
			]
		}
	}
}