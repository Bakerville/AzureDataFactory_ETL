{
	"name": "df_ETLtoKhoa",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_staging_khoa",
						"type": "DatasetReference"
					},
					"name": "InfoSInhVien"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "db_subdim_nienkhoa",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "db_sink_khoa",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "FilterFirstRow"
				},
				{
					"name": "SelectForKhoa"
				},
				{
					"name": "SelectForNienKhoa"
				},
				{
					"name": "AddNamColumn"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "AlterRow2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Prop_0 as string,",
				"          STT as string,",
				"          {Mã sinh viên} as string,",
				"          {Họ lót} as string,",
				"          {Tên} as string,",
				"          {Ngày sinh} as string,",
				"          {Xem điểm} as string,",
				"          {Lịch học} as string,",
				"          {Thông tin} as string,",
				"          {Lịch thi} as string,",
				"          {Học phí} as string,",
				"          {_c0} as string,",
				"          {Niên khoá} as string,",
				"          Khoa as string,",
				"          {Ngày tạo} as string,",
				"          {Tên lớp} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> InfoSInhVien",
				"InfoSInhVien filter(STT == '1') ~> FilterFirstRow",
				"FilterFirstRow select(mapColumn(",
				"          STT,",
				"          Khoa,",
				"          {Ngày tạo}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectForKhoa",
				"FilterFirstRow select(mapColumn(",
				"          STT,",
				"          {Niên khoá}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectForNienKhoa",
				"SelectForNienKhoa derive({Năm} = toInteger(substring({Niên khoá},5,4)),",
				"          {Khoá} = substring({Niên khoá},1,7)) ~> AddNamColumn",
				"AddNamColumn aggregate(groupBy({Niên khoá},",
				"          {Khoá}),",
				"     {Năm} = first({Năm})) ~> aggregate1",
				"SelectForKhoa aggregate(groupBy(Khoa),",
				"     db_Khoa = first(Khoa)) ~> aggregate2",
				"aggregate2 alterRow(upsertIf(true())) ~> AlterRow1",
				"aggregate1 alterRow(upsertIf(true())) ~> AlterRow2",
				"AlterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          NienKhoa as string,",
				"          NamHoc as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['NienKhoa'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'allErrors',",
				"     transactionCommit: 'batch',",
				"     reportSuccessOnError: false,",
				"     mapColumn(",
				"          NienKhoa = {Khoá},",
				"          NamHoc = {Năm}",
				"     )) ~> sink1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          TenKhoa as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['TenKhoa'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          TenKhoa = Khoa",
				"     )) ~> sink2"
			]
		}
	}
}